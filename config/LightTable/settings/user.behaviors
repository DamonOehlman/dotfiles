;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           :lt.objs.intro/show-new-file
           (:lt.objs.files/file.ignore-pattern "node_modules|\\.git")]

     :files [(:lt.objs.files/file-types [{:exts [:purs]
                                          :mime "text/x-haskell"
                                          :name "Purescript"
                                          :tags [:editor.haskell]}])]


     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              :lt.objs.editor/line-numbers
              :lt.objs.editor/fold-gutter
              :lt.plugins.visible-whitespace/show-whitespace
              (:lt.objs.editor/tab-settings false 2 2)
              (:lt.objs.style/set-theme "tomorrow-night-eighties")
              (:lt.objs.style/font-settings "Source Code Pro" "11.5" "1.4")]

     ;; wrap lines for markdown
     :editor.markdown [:lt.objs.editor/wrap]

     :editor.go [(:lt.objs.editor/tab-settings true 2 2)]

     ;; settings for :html
     :editor.html [(:lt.objs.editor/set-codemirror-flags {:smartIndent false})]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.plugins.clojure/print-length 1000)]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app []}}
