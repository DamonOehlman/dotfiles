;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "light")
           (:lt.objs.sidebar.workspace/workspace.open-on-start)
           ((:lt.objs.app/run-post-init [(:lt.obs.console.console.show) (:lt.objs.console.console-tab)]))
           (:lt.objs.files/file.ignore-pattern "node_modules|\\.git")]

     :files [(:lt.objs.files/file-types [{:name "Purescript" :exts [:purs] :mime "text/x-haskell" :tags [:editor.haskell]}
                                         {:name "Other Shell" :exts [:bashrc-custom :startup-hook :start-xmonad] :mime "text/x-sh" :tags [:editor.shell]}
                                         {:name "Jake Buildfile" :exts [:Jakefile :sjs] :mime "text/javascript" :tags [:editor.javascript]}
                                         {:name "Makefile" :exts [:Makefile] :mime "text/x-makefile" :tags [:editor.make]}
                                         {:name "Other HTML" :exts [:ejs :source] :mime "htmlmixed" :tags [:editor.html]}])]


     ;; The editor tag is applied to all editors
     :editor [(:lt.objs.editor/no-wrap)
              (:lt.objs.editor/line-numbers)
              (:lt.plugins.rainbow/rainbow-parens)
              (:lt.objs.editor/fold-gutter)
              (:lt.plugins.visible-whitespace/show-whitespace)
              (:lt.objs.editor/tab-settings false 2 2)
              (:lt.objs.style/set-theme "monokai")
              (:lt.objs.style/font-settings "Source Code Pro" "11.5" "1.4")]

     ;; wrap lines for markdown
     :editor.markdown [:lt.objs.editor/wrap]

     :editor.go [(:lt.objs.editor/tab-settings true 2 2)]

     :editor.jade [(:lt.objs.editor/tab-settings true 2 2)]

     :editor.make [(:lt.objs.editor/tab-settings true 2 2)]

     ;; settings for :html
     :editor.html [(:lt.objs.editor/set-codemirror-flags {:smartIndent false})]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.plugins.clojure/print-length 1000)]}

;;  {:+ {
;;       :tern.config [(:lt.plugins.tern/libs :ecma5)
;;                    (:lt.plugins.tern/plugin :node true)]}
;;  :- {:tern.config [:lt.plugins.tern/libs]}}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [(:lt.objs.editor.file/remove-trailing-whitespace)
           (:lt.objs.intro/show-intro)]}}
