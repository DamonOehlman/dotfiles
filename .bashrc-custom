#!/usr/bin/env bash
export EDITOR=vim

# DOTFILES HOME
DOTFILES_HOME=$HOME/code/dotfiles

# LANGUAGE VERSIONS
PYTHON_VERSION=2.7.9
RUBY_VERSION=2.2.2
NODE_VERSION=stable

## LANGUAGE PATHS
PATH="~/.cabal/bin:/opt/cabal/1.20/bin:/opt/ghc/7.8.4/bin:/opt/happy/1.19.4/bin:/opt/alex/3.1.3/bin:$PATH";
PATH="$HOME/.pyenv/bin:$PATH"

## TOOL PATHS
PATH="$PATH:~/packer"; # packer
PATH="~/bin:$PATH";
AWS_HOME="/opt/aws";

# init JAVA_HOME
export JAVA_HOME="/usr/lib/jvm/default-java";

# chrome sandbox
export CHROME_DEVEL_SANDBOX=/usr/local/sbin/chrome-devel-sandbox

# google dev
export GDEV_HOME=~/code/goog
export PATH="$PATH:$GDEV_HOME/depot_tools"

# video modes
VM_U2713HM="U2713HM"
VM_U2713HM_MODELINE="172.80 1920 2040 2248 2576  1080 1081 1084 1118 -hsync +vsync"
VM_WORK=$VM_U2713HM
VM_SURFACE_SCALED="109.50  1368 1448 1592 1816  768 771 781 805 -hsync +vsync"
DISPLAY_INTERNAL=`xrandr | sed -n 2p | cut -f1 -d$' '`

# initialise the bashrc
# alias chrome="rm -rf $HOME/.config/chrome-test && google-chrome --console --no-first-run --user-data-dir=$HOME/.config/chrome-test --use-fake-device-for-media-stream --use-file-for-fake-video-capture=/home/doehlman/testvideo.y4m --enable-logging --v=1 --vmodule=*third_party/libjingle/*=3,*=0"
alias chrome="rm -rf $HOME/.config/chrome-test && google-chrome --console --no-first-run --user-data-dir=$HOME/.config/chrome-test --enable-usermedia-screen-capturing --allow-http-screen-capture --use-fake-device-for-media-stream --enable-logging --v=1 --vmodule=*third_party/libjingle/*=3,*=0"

alias bsize="browserify . --standalone test | uglifyjs | wc -c"
alias bcheck="browserify . | uglifyjs index.js --screw-ie8 --mangle --compress > /dev/null"

alias dockercleancontainers="docker ps -a --no-trunc| grep 'Exit' | awk '{print \$1}' | xargs -L 1 -r docker rm"
alias dockercleanimages="docker images -a --no-trunc | grep none | awk '{print \$3}' | xargs -L 1 -r docker rmi"
alias dockerclean="dockercleancontainers && dockercleanimages"

# screen customization options
alias layout_work="xrandr --addmode HDMI1 $VM_WORK && xrandr --output HDMI1 --primary --mode $VM_WORK --output $DISPLAY_INTERNAL --off" #--left-of eDP1 && xrandr --output eDP1 --primary"
alias layout_laptop="xrandr --output $DISPLAY_INTERNAL --mode 1920x1080 --primary --output HDMI1 --off"
alias layout_scaled="xrandr --addmode $DISPLAY_INTERNAL INTERNAL_SCALED && xrandr --output $DISPLAY_INTERNAL --mode INTERNAL_SCALED --primary --output HDMI1 --off"
alias layout_canva="xrandr --addmode HDMI1 1920x1200 && xrandr --output HDMI1 --primary --mode 1920x1200 --output $DISPLAY_INTERNAL --off"

# my helpful readme command
alias lynxme="pandoc -f markdown_github - | lynx -stdin"
alias readme="echo &1 && cat ~/code/$1/README.md > /dev/null 2> /dev/null && pandoc -f markdown_github - | lynx -stdin"

# wallpaper switcher
alias wallpaper_next="nitrogen --set-zoom-fill ~/Pictures/wallpaper/\$(ls ~/Pictures/wallpaper/ |sort -R |tail -1)"

# update .bithoundrc to match my default
alias bithound="curl -s https://gist.githubusercontent.com/DamonOehlman/df7dfcf648fd91268ec0/raw/8ea910d278dc3aee3c8e69d5800b0fbb731c936e/.bithoundrc > .bithoundrc"

# an alias to change the colorscheme of the current roxterm terminal
alias scheme="roxterm_tweak SetColourScheme"

# not typically using a gnome environment so better to have this off
unset GNOME_KEYRING_CONTROL

# initialize ssh_agent
eval $(ssh-agent) > /dev/null
ssh-add 2> /dev/null

# synaptic client changes
synclient > /dev/null 2>&1 && synclient TapButton1=0 TapButton2=0 RTCornerButton=0 RBCornerButton=0 ClickFinger1=0 ClickFinger2=0

#
# Define some colors first: Capitals denote bold
#
red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
blue='\e[0;34m'
BLUE='\e[1;34m'
magenta='\e[0;35m'
MAGENTA='\e[1;35m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'              # No Color

# Taken from http://www.opinionatedprogrammer.com/2011/01/colorful-bash-prompt-reflecting-git-status/
function _git_prompt() {
  local git_status="`git status -unormal 2>&1`"
  if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
      local ansi=$GREEN
    elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
      local ansi=$RED
    else
      local ansi=$YELLOW
    fi
    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
      branch=${BASH_REMATCH[1]}
      #test "$branch" != master || branch=' '
    else
      # Detached HEAD.  (branch=HEAD is a faster alternative.)
      branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
      echo HEAD`)"
    fi
    echo -n '[\['"$ansi"'\]'"$branch"'\[\e[0m\]]'
  fi
}

function report_status() {
  RET_CODE=$?
  if [[ $RET_CODE -ne 0 ]] ; then
    echo -ne "[\[$RED\]$RET_CODE\[$NC\]]"
  fi
}

function roxterm_tweak() {
  dbus-send --session /net/sf/roxterm/Options \
    net.sf.roxterm.Options.$1 \
    string:$ROXTERM_ID string:${2:-Default}
}

export _PS1="\[$NC\][\u@\h \W]"
export PS2="\[$NC\]> "
export PROMPT_COMMAND='_status=$(report_status);export PS1="$(_git_prompt)${_status}${_PS1}\$ ";unset _status;'

# ensure go is a go
PATH="~/.go/bin:/opt/go/bin:$PATH";
export GOROOT=/opt/go
export GOPATH=~/code/go
mkdir -p $GOPATH

. $DOTFILES_HOME/scripts/node.sh
. $DOTFILES_HOME/scripts/ruby.sh
. $DOTFILES_HOME/scripts/python.sh

# bring in local configuration settings
[[ -e ~/.bashrc-local ]] && . ~/.bashrc-local

# include the bash secrets file
[[ -e ~/.bashrc-secrets ]] && . ~/.bashrc-secrets

# define some video modes for different monitor configurations
xrandr --newmode "$VM_U2713HM" $VM_U2713HM_MODELINE &> /dev/null
xrandr --newmode "INTERNAL_SCALED" $VM_SURFACE_SCALED &> /dev/null
